{
  "version": 3,
  "sources": ["../../three-mesh-bvh/src/workers/utils/WorkerBase.js", "../../three-mesh-bvh/src/workers/GenerateMeshBVHWorker.js", "../../three-mesh-bvh/src/workers/ParallelMeshBVHWorker.js"],
  "sourcesContent": ["export class WorkerBase {\n\n\tconstructor( worker ) {\n\n\t\tthis.name = 'WorkerBase';\n\t\tthis.running = false;\n\t\tthis.worker = worker;\n\t\tthis.worker.onerror = e => {\n\n\t\t\tif ( e.message ) {\n\n\t\t\t\tthrow new Error( `${ this.name }: Could not create Web Worker with error \"${ e.message }\"` );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( `${ this.name }: Could not create Web Worker.` );\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\trunTask() {}\n\n\tgenerate( ...args ) {\n\n\t\tif ( this.running ) {\n\n\t\t\tthrow new Error( 'GenerateMeshBVHWorker: Already running job.' );\n\n\t\t}\n\n\t\tif ( this.worker === null ) {\n\n\t\t\tthrow new Error( 'GenerateMeshBVHWorker: Worker has been disposed.' );\n\n\t\t}\n\n\t\tthis.running = true;\n\n\t\tconst promise = this.runTask( this.worker, ...args );\n\t\tpromise.finally( () => {\n\n\t\t\tthis.running = false;\n\n\t\t} );\n\n\t\treturn promise;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.worker.terminate();\n\t\tthis.worker = null;\n\n\t}\n\n}\n", "import { Box3, BufferAttribute } from 'three';\nimport { MeshBVH } from '../core/MeshBVH.js';\nimport { WorkerBase } from './utils/WorkerBase.js';\n\nexport class GenerateMeshBVHWorker extends WorkerBase {\n\n\tconstructor() {\n\n\t\tconst worker = new Worker( new URL( './generateMeshBVH.worker.js', import.meta.url ), { type: 'module' } );\n\t\tsuper( worker );\n\t\tthis.name = 'GenerateMeshBVHWorker';\n\n\t}\n\n\trunTask( worker, geometry, options = {} ) {\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tif (\n\t\t\t\tgeometry.getAttribute( 'position' ).isInterleavedBufferAttribute ||\n\t\t\t\tgeometry.index && geometry.index.isInterleavedBufferAttribute\n\t\t\t) {\n\n\t\t\t\tthrow new Error( 'GenerateMeshBVHWorker: InterleavedBufferAttribute are not supported for the geometry attributes.' );\n\n\t\t\t}\n\n\t\t\tworker.onerror = e => {\n\n\t\t\t\treject( new Error( `GenerateMeshBVHWorker: ${ e.message }` ) );\n\n\t\t\t};\n\n\t\t\tworker.onmessage = e => {\n\n\t\t\t\tconst { data } = e;\n\n\t\t\t\tif ( data.error ) {\n\n\t\t\t\t\treject( new Error( data.error ) );\n\t\t\t\t\tworker.onmessage = null;\n\n\t\t\t\t} else if ( data.serialized ) {\n\n\t\t\t\t\tconst { serialized, position } = data;\n\t\t\t\t\tconst bvh = MeshBVH.deserialize( serialized, geometry, { setIndex: false } );\n\t\t\t\t\tconst boundsOptions = Object.assign( {\n\n\t\t\t\t\t\tsetBoundingBox: true,\n\n\t\t\t\t\t}, options );\n\n\t\t\t\t\t// we need to replace the arrays because they're neutered entirely by the\n\t\t\t\t\t// webworker transfer.\n\t\t\t\t\tgeometry.attributes.position.array = position;\n\t\t\t\t\tif ( geometry.index ) {\n\n\t\t\t\t\t\tgeometry.index.array = serialized.index;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst newIndex = new BufferAttribute( serialized.index, 1, false );\n\t\t\t\t\t\tgeometry.setIndex( newIndex );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( boundsOptions.setBoundingBox ) {\n\n\t\t\t\t\t\tgeometry.boundingBox = bvh.getBoundingBox( new Box3() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve( bvh );\n\t\t\t\t\tworker.onmessage = null;\n\n\t\t\t\t} else if ( options.onProgress ) {\n\n\t\t\t\t\toptions.onProgress( data.progress );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tconst index = geometry.index ? geometry.index.array : null;\n\t\t\tconst position = geometry.attributes.position.array;\n\t\t\tconst transferable = [ position ];\n\t\t\tif ( index ) {\n\n\t\t\t\ttransferable.push( index );\n\n\t\t\t}\n\n\t\t\tworker.postMessage( {\n\n\t\t\t\tindex,\n\t\t\t\tposition,\n\t\t\t\toptions: {\n\t\t\t\t\t...options,\n\t\t\t\t\tonProgress: null,\n\t\t\t\t\tincludedProgressCallback: Boolean( options.onProgress ),\n\t\t\t\t\tgroups: [ ... geometry.groups ],\n\t\t\t\t},\n\n\t\t\t}, transferable.map( arr => arr.buffer ).filter( v => ( typeof SharedArrayBuffer === 'undefined' ) || ! ( v instanceof SharedArrayBuffer ) ) );\n\n\t\t} );\n\n\t}\n\n}\n", "import { Box3, BufferAttribute } from 'three';\nimport { MeshBVH } from '../core/MeshBVH.js';\nimport { WorkerBase } from './utils/WorkerBase.js';\nimport { convertToBufferType, isSharedArrayBufferSupported } from '../utils/BufferUtils.js';\nimport { GenerateMeshBVHWorker } from './GenerateMeshBVHWorker.js';\n\nconst DEFAULT_WORKER_COUNT = typeof navigator !== 'undefined' ? navigator.hardwareConcurrency : 4;\nclass _ParallelMeshBVHWorker extends WorkerBase {\n\n\tconstructor() {\n\n\t\tconst worker = new Worker( new URL( './parallelMeshBVH.worker.js', import.meta.url ), { type: 'module' } );\n\t\tsuper( worker );\n\n\t\tthis.name = 'ParallelMeshBVHWorker';\n\t\tthis.maxWorkerCount = Math.max( DEFAULT_WORKER_COUNT, 4 );\n\n\t\tif ( ! isSharedArrayBufferSupported() ) {\n\n\t\t\tthrow new Error( 'ParallelMeshBVHWorker: Shared Array Buffers are not supported.' );\n\n\t\t}\n\n\t}\n\n\trunTask( worker, geometry, options = {} ) {\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tif (\n\t\t\t\tgeometry.getAttribute( 'position' ).isInterleavedBufferAttribute ||\n\t\t\t\tgeometry.index && geometry.index.isInterleavedBufferAttribute\n\t\t\t) {\n\n\t\t\t\tthrow new Error( 'ParallelMeshBVHWorker: InterleavedBufferAttribute are not supported for the geometry attributes.' );\n\n\t\t\t}\n\n\t\t\tworker.onerror = e => {\n\n\t\t\t\treject( new Error( `ParallelMeshBVHWorker: ${ e.message }` ) );\n\n\t\t\t};\n\n\t\t\tworker.onmessage = e => {\n\n\t\t\t\tconst { data } = e;\n\n\t\t\t\tif ( data.error ) {\n\n\t\t\t\t\treject( new Error( data.error ) );\n\t\t\t\t\tworker.onmessage = null;\n\n\t\t\t\t} else if ( data.serialized ) {\n\n\t\t\t\t\tconst { serialized, position } = data;\n\t\t\t\t\tconst bvh = MeshBVH.deserialize( serialized, geometry, { setIndex: false } );\n\t\t\t\t\tconst boundsOptions = {\n\t\t\t\t\t\tsetBoundingBox: true,\n\t\t\t\t\t\t...options,\n\t\t\t\t\t};\n\n\t\t\t\t\t// we need to replace the arrays because they're neutered entirely by the\n\t\t\t\t\t// webworker transfer.\n\t\t\t\t\tgeometry.attributes.position.array = position;\n\t\t\t\t\tif ( geometry.index ) {\n\n\t\t\t\t\t\tgeometry.index.array = serialized.index;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst newIndex = new BufferAttribute( serialized.index, 1, false );\n\t\t\t\t\t\tgeometry.setIndex( newIndex );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( boundsOptions.setBoundingBox ) {\n\n\t\t\t\t\t\tgeometry.boundingBox = bvh.getBoundingBox( new Box3() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve( bvh );\n\t\t\t\t\tworker.onmessage = null;\n\n\t\t\t\t} else if ( options.onProgress ) {\n\n\t\t\t\t\toptions.onProgress( data.progress );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tconst index = geometry.index ? geometry.index.array : null;\n\t\t\tconst position = geometry.attributes.position.array;\n\t\t\tworker.postMessage( {\n\n\t\t\t\toperation: 'BUILD_BVH',\n\t\t\t\tmaxWorkerCount: this.maxWorkerCount,\n\t\t\t\tindex: convertToBufferType( index, SharedArrayBuffer ),\n\t\t\t\tposition: convertToBufferType( position, SharedArrayBuffer ),\n\t\t\t\toptions: {\n\t\t\t\t\t...options,\n\t\t\t\t\tonProgress: null,\n\t\t\t\t\tincludedProgressCallback: Boolean( options.onProgress ),\n\t\t\t\t\tgroups: [ ... geometry.groups ],\n\t\t\t\t},\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n}\n\nexport class ParallelMeshBVHWorker {\n\n\tconstructor() {\n\n\t\tif ( isSharedArrayBufferSupported() ) {\n\n\t\t\treturn new _ParallelMeshBVHWorker();\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'ParallelMeshBVHWorker: SharedArrayBuffers not supported. Falling back to single-threaded GenerateMeshBVHWorker.' );\n\n\t\t\tconst object = new GenerateMeshBVHWorker();\n\t\t\tobject.maxWorkerCount = DEFAULT_WORKER_COUNT;\n\t\t\treturn object;\n\n\t\t}\n\n\t}\n\n}\n"],
  "mappings": "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",
  "names": ["position", "position"]
}
